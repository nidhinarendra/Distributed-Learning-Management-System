
// Program: TCPServer
// Subject: CMPE 207
// Assignment 1 - TCP client server
// Created by Team 8.


/*****SERVER PROGRAM*****/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <errno.h>


void error(const char *msg)
{
	perror(msg);
	printf ("%s\n", strerror(errno));
	exit(1);
}

int receiveMessage(int newsockfd, struct sockaddr_in cli_addr, socklen_t client_length, char* buffer){
	int receiveSuccess;
	bzero(buffer,BUFSIZ);
	receiveSuccess = recvfrom(newsockfd, buffer, BUFSIZ, 0, (struct sockaddr *) &cli_addr, &client_length);
	if (receiveSuccess < 0) error("ERROR reading from socket\n");
	printf("The message is %s\n", buffer);

	return receiveSuccess;
}


int createSocket(){
	int sockfd;
	sockfd = socket(AF_INET, SOCK_STREAM, 0);
	if (sockfd < 0)
		error("ERROR opening socket\n");

	return sockfd;
}

int binding(int sockfd,struct sockaddr_in serv_addr ){
	int bindSuccess;
	bindSuccess = bind(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr));
	if (bindSuccess < 0)
		error("Binding Error!\n");

	return bindSuccess;
}

int listenNaccept(int sockfd, int portno, char* buffer){
	pid_t childpid;
	struct sockaddr_in serv_addr, cli_addr;
	int newsockfd, receiveSuccess;
	socklen_t client_length;


	listen(sockfd, 5);
	printf("The server is listening on the port %d\n", portno);

	for(;;){
		memset(&cli_addr, 0, sizeof(cli_addr));
		newsockfd = accept(sockfd, (struct sockaddr *) &cli_addr, &client_length);
		if (newsockfd < 0)
			error("ERROR on accept\n");

		//Creating a child process to proceed with the new client
		childpid = fork();
		if (childpid == -1) {
			close(newsockfd);
		}

		else if(childpid > 0){
			close(newsockfd);
		}

		else if(childpid == 0){
			receiveSuccess = receiveMessage(newsockfd, cli_addr, client_length, buffer);
			printf("The message in the buffer is from listenNaccept() %s\n", buffer);
		}
	}
	return receiveSuccess;
}




int main(int argc, char *argv[])
{
	int sockfd, portno, bindSuccess, receiveSuccess;
	size_t lengthOfMessageReceived;
	socklen_t client_length, server_length;
	struct sockaddr_in serv_addr;
	char buffer[BUFSIZ];

	if(argc < 2){
		error("Invalid arguments\n");

		printf("Usage: ./server <Server port number>\n");
		exit(0);
	}

	portno = atoi(argv[1]);
	sockfd = createSocket();

	bzero((char *) &serv_addr, sizeof(serv_addr));
	serv_addr.sin_family = AF_INET;
	serv_addr.sin_addr.s_addr = INADDR_ANY;
	serv_addr.sin_port =  htons(portno);

	bindSuccess = binding(sockfd, serv_addr );

	receiveSuccess = listenNaccept(sockfd, portno, buffer);

	if(receiveSuccess !=0){
		printf("The message received is %s\n", buffer);
		printf("The number of bytes received is %d\n", receiveSuccess);
	}

	close(sockfd);
	return 0;
}
