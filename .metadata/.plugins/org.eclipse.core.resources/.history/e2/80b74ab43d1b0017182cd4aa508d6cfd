
// Program: TCPServer
// Subject: CMPE 207
// Assignment 1 - TCP client server
// Created by Team 8.



/*Write TCP client and server programs that the client passes a greeting message
 *to the server. The server receives the message, counts the number of characters
 *in the message, and sends the count back to the client. The client then
 *receives the value, compares it to its count, and prints out both the message
 *and the count.
 */

/*****SERVER PROGRAM*****/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <errno.h>


void error(const char *msg)
{
	perror(msg);
	printf ("%s\n", strerror(errno));
	exit(1);
}


int main(int argc, char *argv[])
{

	int sockfd, newsockfd, rwSuccess, portno;
	size_t lengthOfMessageReceived;

	socklen_t client_length, server_length;

	char buffer[BUFSIZ];

	struct sockaddr_in serv_addr, cli_addr;

	pid_t childpid;

	if(argc < 2){
			error("Invalid arguments");

			printf("Usage: ./server <Server port number>");
			exit(0);
		}
	portno = atoi(argv[1]);

	sockfd = socket(AF_INET, SOCK_STREAM, 0);
	if (sockfd < 0)
		error("ERROR opening socket");

	bzero((char *) &serv_addr, sizeof(serv_addr));
	serv_addr.sin_family = AF_INET;
	serv_addr.sin_addr.s_addr = INADDR_ANY;

	serv_addr.sin_port =  htons(portno);



	printf("The server is listening on port %d\n", portno);



	//Binding socket to an address and checking if it is successful
	if (bind(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0)
		error("ERROR on binding\n");

	//Listen on the socket for incoming connections
	listen(sockfd,5);
	printf("The server is listening on port %d\n", portno);

	//Loops forever, so that the server is always ready to listen to new connections
	for(;;){
		memset(&cli_addr, 0, sizeof(cli_addr));
		newsockfd = accept(sockfd, (struct sockaddr *) &cli_addr, &client_length);
		if (newsockfd < 0)
			error("ERROR on accept\n");

		printf("I got a new connection\n");
		//Creating a child process to proceed with the new client
		childpid = fork();
		if (childpid == -1) {
			printf("inside == -1 The childpid is %d\n", getpid());
			close(newsockfd);
		}
		else if(childpid > 0){
			printf("inside > 0 The childpid is %d\n", getpid());
			close(newsockfd);
		}
		else if(childpid == 0){
			bzero(buffer,BUFSIZ);
			printf("inside == 0 The childpid is %d\n", getpid());
			//Read the message sent by the client
			rwSuccess = recvfrom(newsockfd, buffer, BUFSIZ, 0, (struct sockaddr *) &cli_addr, &client_length);
			if (rwSuccess < 0) error("ERROR reading from socket");
			lengthOfMessageReceived = strlen(buffer) - 1;
			printf("The message is %s\n", buffer);

			close(newsockfd);

		}
	}

	//Close the server when it is no longer required [cntrl+c]
	close(sockfd);
	return 0;
}
