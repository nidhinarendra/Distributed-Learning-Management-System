// Program: TCPClient
// Subject: CMPE 207
// Project - Distributed Learning Management System
// Created by Team 8.


/*****CLIENT PROGRAM*****/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <errno.h>
#include <iostream>
#include <string>
using namespace std;
/*
 **********************************************************************************************************
 Function Name : error
 Purpose	   : Function to display the error message from the program to standard error.
 Parameter     : character pointer which points to the starting of the message
 Return Value  : The program exits with the condition 1
 **********************************************************************************************************
 */


void error(const char *msg)
{
	perror(msg);
	printf ("%s", strerror(errno));
	exit(1);
}


void userInfo(){

	char storageBuffer[BUFSIZ];
	char tempBuf[10];
	char ID, uniqueID;
	string name;
	int UserType, newOrReturningUser, bufferWriteSuccess;
	char *ptr; // for strtol. not used anywhere
	memset(storageBuffer, '\0',BUFSIZ);


	printf("What kind of a user are you? Please choose an option\n"
			"1. System Administrator\n"
			"2. Instructor\n"
			"3. Student\n");
	fgets(tempBuf, sizeof tempBuf, stdin);
	tempBuf[strlen(tempBuf) - 1] = '\0';
	UserType = strtol(tempBuf, &ptr, 10);
	if(UserType > 3){
		printf("Not a valid option");
		userInfo();
	}

	printf("Are you a new user or returning user? Please choose an option\n"
			"1. New user\n"
			"2. Returning user\n");
	fgets(tempBuf, sizeof tempBuf, stdin);
	tempBuf[strlen(tempBuf) - 1] = '\0';
	newOrReturningUser = strtol(tempBuf, &ptr, 10);

	if(newOrReturningUser == 1){
		printf("Please enter your name\n");
		fgets(tempBuf, sizeof tempBuf, stdin);
		tempBuf[strlen(tempBuf) - 1] = '\0';
		name = strtol(tempBuf, &ptr, 10);
		printf("The name is: %s", tempBuf);

		printf("Enter your ID\n");
		fgets(tempBuf, sizeof tempBuf, stdin);
		tempBuf[strlen(tempBuf) - 1] = 0;
		ID = strtol(tempBuf, &ptr, 10);
		printf("The ID is: %c", ID);

		bufferWriteSuccess = snprintf(storageBuffer, BUFSIZ, "%d %d %s %c", UserType, newOrReturningUser,name.c_str(), ID );

	}

	else if(newOrReturningUser == 2){
		printf("Please enter the unique ID\n");
		fgets(tempBuf, sizeof tempBuf, stdin);
		tempBuf[strlen(tempBuf) - 1] = 0;
		uniqueID = strtol(tempBuf, &ptr, 10);
		bufferWriteSuccess = snprintf(storageBuffer, BUFSIZ, "%d %d %c", UserType, newOrReturningUser,ID );

	}

	else{
		printf("Not a valid option\n");
		userInfo();
	}
	printf("The buffer contains: %s", storageBuffer);

}


/*
 **********************************************************************************************************
 Function Name : Main
 Purpose	   : Program starts here
 Parameter     : None
 Return Value  : Integer
 *********************************************************************************************************
 */

int main(int argc, char *argv[])
{
	//sockfd is the file descriptors
	//rwSuccess is the return value for read() and write() calls
	//Response value is the value got from the server
	int sockfd, rwSuccess, reponse_value, portno;


	//The Internet address of the server is initialized
	struct sockaddr_in serv_addr;

	//An entry in the hosts database.
	struct hostent *server;
	socklen_t server_length; //server address

	//The characters written on the socket is read into this buffer
	char storageBuffer[10*1024];
	const char* host = "localhost";
	if(argc < 2){
		error("Invalid arguments");
		printf("Usage: ./client <Server port number>");
		exit(0);
	}

	portno = atoi(argv[1]);
	//Creating a new socket
	sockfd = socket(AF_INET, SOCK_STREAM, 0);

	if (sockfd < 0)
		error("ERROR opening socket");

	server = gethostbyname(host);

	if (server == NULL) {
		fprintf(stderr,"ERROR, no such host\n");
		exit(0);
	}


	bzero((char *) &serv_addr, sizeof(serv_addr));
	serv_addr.sin_family = AF_INET;
	bcopy((char *)server->h_addr, (char *)&serv_addr.sin_addr.s_addr, server->h_length);
	serv_addr.sin_port = htons(portno);

	//Connecting to the server
	if (connect(sockfd,(struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0)
		error("ERROR connecting");

	userInfo();

}
